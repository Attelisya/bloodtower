// –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ,
// —Ç–∞–∫ –∫–∞–∫ Game —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ game.js

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 */
class UI {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        this.game = new Game();
        
        // –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
        this.currentScreen = 'start-screen';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.initEventListeners();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    initEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
        document.addEventListener('game:logUpdated', this.handleLogUpdate.bind(this));
        document.addEventListener('game:playerUpdated', this.handlePlayerUpdate.bind(this));
        document.addEventListener('game:nightModeChanged', this.handleNightModeChange.bind(this));
        document.addEventListener('game:stateLoaded', this.handleGameStateLoaded.bind(this));
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
     * @param {string} screenId ID —ç–∫—Ä–∞–Ω–∞
     */
    showScreen(screenId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.style.display = 'none';
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const screen = document.getElementById(screenId);
        if (screen) {
            screen.style.display = 'flex';
            this.currentScreen = screenId;
            
            // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            const event = new CustomEvent('ui:screenChanged', {
                detail: { screen: screenId }
            });
            document.dispatchEvent(event);
        } else {
            console.error(`–≠–∫—Ä–∞–Ω —Å ID ${screenId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞
     * @param {Event} event –°–æ–±—ã—Ç–∏–µ
     */
    handleLogUpdate(event) {
        const logEntry = event.detail.logEntry;
        this.updateLog(logEntry);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     * @param {Event} event –°–æ–±—ã—Ç–∏–µ
     */
    handlePlayerUpdate(event) {
        const player = event.detail.player;
        this.updatePlayerCard(player);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥–µ–Ω—å/–Ω–æ—á—å
     * @param {Event} event –°–æ–±—ã—Ç–∏–µ
     */
    handleNightModeChange(event) {
        const isNight = event.detail.isNight;
        const currentDay = event.detail.currentDay;
        
        this.updateNightMode(isNight);
        this.updateDayCounter(currentDay);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {Event} event –°–æ–±—ã—Ç–∏–µ
     */
    handleGameStateLoaded(event) {
        const gameState = event.detail.gameState;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.refreshUI();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     */
    refreshUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∂—É—Ä–Ω–∞–ª
        this.updateLogList();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –¥–µ–Ω—å/–Ω–æ—á—å
        this.updateNightMode(this.game.isNight);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
        this.updateDayCounter(this.game.currentDay);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∂—É—Ä–Ω–∞–ª–∞
     */
    updateLogList() {
        const logContainer = document.getElementById('game-log-content');
        if (!logContainer) return;
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        logContainer.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞
        this.game.eventLog.forEach(entry => {
            this.updateLog(entry, true);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∂—É—Ä–Ω–∞–ª –≤–Ω–∏–∑
        logContainer.scrollTop = logContainer.scrollHeight;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ
     * @param {Object} logEntry –ó–∞–ø–∏—Å—å –∂—É—Ä–Ω–∞–ª–∞
     * @param {boolean} append –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü (false - –∑–∞–º–µ–Ω–∏—Ç—å)
     */
    updateLog(logEntry, append = true) {
        const logContainer = document.getElementById('game-log-content');
        if (!logContainer) return;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–∏
        const logItem = document.createElement('div');
        logItem.className = `log-item log-type-${logEntry.type}`;
        logItem.dataset.logId = logEntry.id;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
        const logHeader = document.createElement('div');
        logHeader.className = 'log-header';
        
        const timeSpan = document.createElement('span');
        timeSpan.className = 'log-time';
        timeSpan.textContent = logEntry.timestamp;
        
        const phaseSpan = document.createElement('span');
        phaseSpan.className = 'log-phase';
        phaseSpan.textContent = logEntry.dayInfo;
        
        logHeader.appendChild(timeSpan);
        logHeader.appendChild(phaseSpan);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏
        const logText = document.createElement('div');
        logText.className = 'log-message';
        logText.textContent = logEntry.message;
        
        // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å
        logItem.appendChild(logHeader);
        logItem.appendChild(logText);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (append) {
            logContainer.appendChild(logItem);
        } else {
            const existingItem = logContainer.querySelector(`[data-log-id="${logEntry.id}"]`);
            if (existingItem) {
                logContainer.replaceChild(logItem, existingItem);
            } else {
                logContainer.appendChild(logItem);
            }
        }
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∂—É—Ä–Ω–∞–ª –≤–Ω–∏–∑
        logContainer.scrollTop = logContainer.scrollHeight;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
     */
    updatePlayersList() {
        const container = document.getElementById('players-grimoire');
        if (!container) return;
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        container.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        this.game.players.forEach(player => {
            const playerCard = this.createPlayerCard(player);
            container.appendChild(playerCard);
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞
     * @param {Object} player –ò–≥—Ä–æ–∫
     * @returns {HTMLElement} –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä–æ–∫–∞
     */
    createPlayerCard(player) {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
        const card = document.createElement('div');
        card.className = 'player-role-item';
        card.dataset.playerId = player.id;
        
        if (!player.alive) {
            card.classList.add('player-dead');
        }
        
        if (player.poisoned) {
            card.classList.add('player-poisoned');
        }
        
        if (player.drunk) {
            card.classList.add('player-drunk');
        }
        
        if (player.protected) {
            card.classList.add('player-protected');
        }
        
        // –ò–º—è –∏–≥—Ä–æ–∫–∞
        const nameDiv = document.createElement('div');
        nameDiv.className = 'player-name';
        nameDiv.textContent = player.name;
        
        // –†–æ–ª—å –∏–≥—Ä–æ–∫–∞
        const roleDiv = document.createElement('div');
        roleDiv.className = 'player-role';
        
        if (player.character) {
            roleDiv.textContent = player.character.name;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if (player.alignment === 'good') {
                card.classList.add('player-good');
            } else if (player.alignment === 'evil') {
                card.classList.add('player-evil');
            }
        } else {
            roleDiv.textContent = '‚Äî';
        }
        
        // –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
        const statusDiv = document.createElement('div');
        statusDiv.className = 'player-status';
        
        const statusIcons = [];
        
        if (!player.alive) {
            statusIcons.push('‚ò†');
        }
        
        if (player.poisoned) {
            statusIcons.push('üß™');
        }
        
        if (player.drunk) {
            statusIcons.push('üç∫');
        }
        
        if (player.protected) {
            statusIcons.push('üõ°');
        }
        
        statusDiv.textContent = statusIcons.join(' ');
        
        // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card.appendChild(nameDiv);
        card.appendChild(roleDiv);
        
        if (statusIcons.length > 0) {
            card.appendChild(statusDiv);
        }
        
        return card;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞
     * @param {Object} player –ò–≥—Ä–æ–∫
     */
    updatePlayerCard(player) {
        const card = document.querySelector(`.player-role-item[data-player-id="${player.id}"]`);
        
        if (card) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
            card.classList.toggle('player-dead', !player.alive);
            card.classList.toggle('player-poisoned', player.poisoned);
            card.classList.toggle('player-drunk', player.drunk);
            card.classList.toggle('player-protected', player.protected);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            const statusDiv = card.querySelector('.player-status') || document.createElement('div');
            statusDiv.className = 'player-status';
            
            const statusIcons = [];
            
            if (!player.alive) {
                statusIcons.push('‚ò†');
            }
            
            if (player.poisoned) {
                statusIcons.push('üß™');
            }
            
            if (player.drunk) {
                statusIcons.push('üç∫');
            }
            
            if (player.protected) {
                statusIcons.push('üõ°');
            }
            
            statusDiv.textContent = statusIcons.join(' ');
            
            if (statusIcons.length > 0) {
                if (!card.querySelector('.player-status')) {
                    card.appendChild(statusDiv);
                }
            } else {
                const existingStatusDiv = card.querySelector('.player-status');
                if (existingStatusDiv) {
                    card.removeChild(existingStatusDiv);
                }
            }
        } else {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
            this.updatePlayersList();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º –¥–µ–Ω—å/–Ω–æ—á—å
     * @param {boolean} isNight –ü—Ä–∏–∑–Ω–∞–∫ –Ω–æ—á–∏
     */
    updateNightMode(isNight) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document.body.classList.toggle('night-mode', isNight);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const toggleButton = document.getElementById('day-night-toggle');
        if (toggleButton) {
            toggleButton.textContent = isNight ? '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¥–µ–Ω—å' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –Ω–æ—á—å';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
        const gameScreenElement = document.getElementById('game-screen');
        if (gameScreenElement) {
            gameScreenElement.classList.toggle('night-mode', isNight);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
        document.querySelectorAll('.player-role-item').forEach(card => {
            card.classList.toggle('night-mode', isNight);
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
     * @param {number} day –ù–æ–º–µ—Ä –¥–Ω—è
     */
    updateDayCounter(day) {
        const counter = document.getElementById('day-counter');
        if (counter) {
            counter.textContent = `–î–µ–Ω—å ${day}`;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É
     * @param {string} scenario –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
     * @param {Array} playerNames –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    startGame(scenario, playerNames) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
        const result = this.game.initializeGame(scenario, playerNames);
        
        if (result) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
            this.assignRolesAutomatically(scenario);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.refreshUI();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã
            this.showScreen('game-screen');
        }
        
        return result;
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
     * @param {string} scenario –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
     */
    assignRolesAutomatically(scenario) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        const scenarioData = window.SCENARIOS[scenario] || window.SCENARIOS["–ù–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–∑—Ä–µ–≤–∞—é—Ç"];
        
        if (!scenarioData) {
            console.error('–û—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        const playerCount = this.game.players.length;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–≥—Ä–æ–∫–æ–≤
        const roleCounts = this.game.getPlayerCounts();
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Ä–æ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const goodRoles = [...scenarioData.good];
        const outsiderRoles = [...scenarioData.outsiders];
        const minionRoles = [...scenarioData.minions];
        const demonRoles = [...scenarioData.demons];
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Ä–æ–ª–µ–π
        const shuffledGood = this.shuffleArray(goodRoles);
        const shuffledOutsiders = this.shuffleArray(outsiderRoles);
        const shuffledMinions = this.shuffleArray(minionRoles);
        const shuffledDemons = this.shuffleArray(demonRoles);
        
        // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const selectedGood = shuffledGood.slice(0, roleCounts.townfolk);
        const selectedOutsiders = shuffledOutsiders.slice(0, roleCounts.outsiders);
        const selectedMinions = shuffledMinions.slice(0, roleCounts.minions);
        const selectedDemons = shuffledDemons.slice(0, roleCounts.demons);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        const allSelectedRoles = [
            ...selectedGood.map(role => ({ ...role, alignment: 'good' })),
            ...selectedOutsiders.map(role => ({ ...role, alignment: 'good' })),
            ...selectedMinions.map(role => ({ ...role, alignment: 'evil' })),
            ...selectedDemons.map(role => ({ ...role, alignment: 'evil' }))
        ];
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
        const shuffledRoles = this.shuffleArray(allSelectedRoles);
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
        this.game.players.forEach((player, index) => {
            if (index < shuffledRoles.length) {
                const role = shuffledRoles[index];
                player.character = role;
                player.alignment = role.alignment;
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
        this.game.addToLog('–†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', 'system');
        
        return true;
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
     * @param {Array} array –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
     * @returns {Array} –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
     */
    shuffleArray(array) {
        const result = [...array];
        for (let i = result.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [result[i], result[j]] = [result[j], result[i]];
        }
        return result;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∂–∏–º –¥–µ–Ω—å/–Ω–æ—á—å
     * @returns {boolean} true - –Ω–æ—á—å, false - –¥–µ–Ω—å
     */
    isNightMode() {
        return this.game.isNight;
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –¥–µ–Ω—å/–Ω–æ—á—å
     * @returns {boolean} –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    toggleNightMode() {
        return this.game.toggleNightMode();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {number} playerId ID –∏–≥—Ä–æ–∫–∞
     * @param {string} state –°–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {boolean} value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @returns {Object|null} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    updatePlayerState(playerId, state, value) {
        return this.game.updatePlayerState(playerId, state, value);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
     * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {string} type –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns {Object} –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
     */
    addToLog(message, type = 'system') {
        return this.game.addToLog(message, type);
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
     */
    clearLog() {
        this.game.eventLog = [];
        this.updateLogList();
        this.addToLog('–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω', 'system');
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     * @returns {Object} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    exportGameState() {
        return this.game.exportGameState();
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     * @param {Object} gameState –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞
     */
    importGameState(gameState) {
        return this.game.importGameState(gameState);
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
     * @param {string} saveName –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    saveGameToLocalStorage(saveName = 'autosave') {
        try {
            const gameState = this.exportGameState();
            const saveData = {
                timestamp: new Date().toISOString(),
                name: saveName,
                state: gameState
            };
            
            localStorage.setItem(`btcg_save_${saveName}`, JSON.stringify(saveData));
            this.addToLog(`–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${saveName}`, 'system');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
            return false;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     * @param {string} saveName –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
     */
    loadGameFromLocalStorage(saveName = 'autosave') {
        try {
            const saveJson = localStorage.getItem(`btcg_save_${saveName}`);
            
            if (!saveJson) {
                console.error(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ "${saveName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                return false;
            }
            
            const saveData = JSON.parse(saveJson);
            
            if (!saveData || !saveData.state) {
                console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                return false;
            }
            
            const result = this.importGameState(saveData.state);
            
            if (result) {
                this.addToLog(`–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${saveName}`, 'system');
                this.showScreen('game-screen');
            }
            
            return result;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã:', error);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
     * @returns {Array} –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
     */
    getSavedGamesList() {
        const saves = [];
        
        try {
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                
                if (key && key.startsWith('btcg_save_')) {
                    const saveJson = localStorage.getItem(key);
                    
                    try {
                        const saveData = JSON.parse(saveJson);
                        
                        if (saveData && saveData.timestamp) {
                            saves.push({
                                key: key.replace('btcg_save_', ''),
                                name: saveData.name || key.replace('btcg_save_', ''),
                                timestamp: new Date(saveData.timestamp),
                                playerCount: saveData.state?.players?.length || 0
                            });
                        }
                    } catch (e) {
                        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${key}:`, e);
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π:', error);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        saves.sort((a, b) => b.timestamp - a.timestamp);
        
        return saves;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å UI
window.UI = UI;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
function addDynamicStyles() {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const styleElement = document.createElement('style');
    styleElement.textContent = `
        body.night-mode {
            background-color: #0a0a0f;
            color: #b0c4de;
        }
        
        body.night-mode .grimoire-section {
            background-color: rgba(10, 10, 15, 0.9);
            border-color: #4a0000;
        }
        
        body.night-mode .character-item:hover {
            background-color: rgba(50, 50, 100, 0.3);
        }
        
        body.night-mode .player-role-item {
            background-color: rgba(10, 10, 20, 0.7);
        }
        
        body.night-mode .btn {
            background-color: #1a1a2a;
            color: #b0c4de;
        }
        
        body.night-mode .btn:hover {
            background-color: #2a2a3a;
        }
        
        body.night-mode .btn-primary {
            background-color: #00008B;
        }
        
        body.night-mode .btn-primary:hover {
            background-color: #0000CD;
        }
    `;
    document.head.appendChild(styleElement);
    
    console.log("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ UI –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
// if (typeof module !== 'undefined') {
//     module.exports = { UI };
// } 